// Code generated by MockGen. DO NOT EDIT.
// Source: taxCalculatorService.pb.go

// Package mock_proto is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	proto "taxCalculator/proto"
)

// MockTaxCalculatorServiceClient is a mock of TaxCalculatorServiceClient interface
type MockTaxCalculatorServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockTaxCalculatorServiceClientMockRecorder
}

// MockTaxCalculatorServiceClientMockRecorder is the mock recorder for MockTaxCalculatorServiceClient
type MockTaxCalculatorServiceClientMockRecorder struct {
	mock *MockTaxCalculatorServiceClient
}

// NewMockTaxCalculatorServiceClient creates a new mock instance
func NewMockTaxCalculatorServiceClient(ctrl *gomock.Controller) *MockTaxCalculatorServiceClient {
	mock := &MockTaxCalculatorServiceClient{ctrl: ctrl}
	mock.recorder = &MockTaxCalculatorServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaxCalculatorServiceClient) EXPECT() *MockTaxCalculatorServiceClientMockRecorder {
	return m.recorder
}

// CalculateTax mocks base method
func (m *MockTaxCalculatorServiceClient) CalculateTax(ctx context.Context, in *proto.TaxCalculatorRequest, opts ...grpc.CallOption) (*proto.TaxCalculatorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CalculateTax", varargs...)
	ret0, _ := ret[0].(*proto.TaxCalculatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateTax indicates an expected call of CalculateTax
func (mr *MockTaxCalculatorServiceClientMockRecorder) CalculateTax(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTax", reflect.TypeOf((*MockTaxCalculatorServiceClient)(nil).CalculateTax), varargs...)
}

// MockTaxCalculatorServiceServer is a mock of TaxCalculatorServiceServer interface
type MockTaxCalculatorServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockTaxCalculatorServiceServerMockRecorder
}

// MockTaxCalculatorServiceServerMockRecorder is the mock recorder for MockTaxCalculatorServiceServer
type MockTaxCalculatorServiceServerMockRecorder struct {
	mock *MockTaxCalculatorServiceServer
}

// NewMockTaxCalculatorServiceServer creates a new mock instance
func NewMockTaxCalculatorServiceServer(ctrl *gomock.Controller) *MockTaxCalculatorServiceServer {
	mock := &MockTaxCalculatorServiceServer{ctrl: ctrl}
	mock.recorder = &MockTaxCalculatorServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaxCalculatorServiceServer) EXPECT() *MockTaxCalculatorServiceServerMockRecorder {
	return m.recorder
}

// CalculateTax mocks base method
func (m *MockTaxCalculatorServiceServer) CalculateTax(arg0 context.Context, arg1 *proto.TaxCalculatorRequest) (*proto.TaxCalculatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTax", arg0, arg1)
	ret0, _ := ret[0].(*proto.TaxCalculatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateTax indicates an expected call of CalculateTax
func (mr *MockTaxCalculatorServiceServerMockRecorder) CalculateTax(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTax", reflect.TypeOf((*MockTaxCalculatorServiceServer)(nil).CalculateTax), arg0, arg1)
}
